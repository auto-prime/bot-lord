name: APK Extractor

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: "Direct URL to ROM (.zip) or payload.bin"
        required: true
      DEST_PATH:
        description: "Remote path (e.g. dumps/oneplus/oneplus6t)"
        required: true
        default: "dumps/device/unknown"
      ADD_ROM_SUBFOLDER:
        description: "Append subfolder using ROM file stem (true/false)"
        required: false
        default: "true"
      AUTH_KEY:
        description: "Password to run (compared to WORKFLOW_AUTH_KEY)"
        required: true

jobs:
  auth_check:
    runs-on: ubuntu-22.04
    outputs:
      active: ${{ steps.check.outputs.active }}
    steps:
      - id: check
        run: echo "active=${{ github.event.inputs.AUTH_KEY == secrets.WORKFLOW_AUTH_KEY }}" >> "$GITHUB_OUTPUT"

  dump_apks_only:
    needs: auth_check
    if: ${{ needs.auth_check.outputs.active == 'true' }}
    runs-on: ubuntu-22.04
    env:
      TZ: Asia/Ho_Chi_Minh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maximize disk space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Check rclone secrets present
        id: rclone_flag
        run: |
          if [ -n "${{ secrets.RCLONE_CONF }}" ] && [ -n "${{ secrets.RCLONE_DESTINATION }}" ]; then
            echo "has_rclone=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_rclone=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            aria2 unzip curl file rsync jq \
            android-sdk-libsparse-utils e2fsprogs util-linux fuse3 \
            erofs-utils \
            python3 python3-venv python3-pip git

      - name: Setup Python venv + payload-dumper (5ec1cff)
        run: |
          set -euo pipefail
          python3 -m venv venv
          . venv/bin/activate
          pip install --upgrade pip wheel
          
          # FIX: Clone the repo first, then install from the local copy to avoid git auth issues
          git clone https://github.com/5ec1cff/payload_dumper.git
          pip install ./payload_dumper \
                      brotli zstandard pycryptodome tqdm

      - name: Prepare workspace
        run: |
          sudo mkdir -p /mnt/payload_mounts && sudo chown $USER:$USER /mnt/payload_mounts
          mkdir -p work out_imgs out_apks

      - name: Download ROM / payload.bin
        working-directory: work
        run: |
          aria2c -x16 -s16 -j5 --file-allocation=none -o rom.bin "${{ github.event.inputs.ROM_URL }}"
          if file -b rom.bin | grep -qi "Zip archive"; then
            unzip -o -q rom.bin -d romzip
            PBIN=$(find romzip -type f -name 'payload.bin' | head -n 1 || true)
            if [ -z "$PBIN" ]; then echo "E: payload.bin not found in ZIP"; exit 1; fi
            mv "$PBIN" payload.bin
            rm -rf rom.bin romzip
          else
            mv rom.bin payload.bin
          fi

      - name: Dump partitions from payload.bin
        run: |
          set -euo pipefail
          . venv/bin/activate
          
          # Use the hardcoded list of partitions as requested
          PARTITIONS_TO_DUMP="my_bigball,my_carrier,my_engineering,my_heytap,my_manifest,my_product,my_region,my_company,my_stock,my_preload,odm,product,system,system_ext,vendor"
          echo "[*] Dumping partitions from hardcoded list: $PARTITIONS_TO_DUMP"
          python3 -m payload_dumper --out out_imgs --partitions "$PARTITIONS_TO_DUMP" work/payload.bin
          
          echo "[✓] Dumping finished. Image list:"
          ls -lah out_imgs

      - name: Extract APKs
        id: extract
        run: |
          echo "[*] Checking for partition images..."
          if ! ls out_imgs/*.img 1> /dev/null 2>&1; then
            echo "-> No .img files found to process. Skipping APK extraction."
            echo "total_apks=0" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          echo "-> Partition images found. Starting extraction process."

          bash -c "$(cat <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          OUT_IMG_DIR="out_imgs"; OUT_APK_DIR="out_apks"; MOUNT_ROOT="/mnt/payload_mounts"; APK_SUBDIRS=("app" "priv-app")
          is_sparse() { file -b "$1" 2>/dev/null | grep -qi "Android sparse image"; }; is_erofs() { [[ "$(hexdump -s 1024 -n 4 -e '1/4 "%08x"' "$1" 2>/dev/null || true)" == "e0f5e1e2" ]]; }
          safe_umount() { if mountpoint -q "$1"; then sudo umount "$1" || true; fi; }; cleanup() { for d in "$MOUNT_ROOT"/*; do [[ -d "$d" ]] && safe_umount "$d"; done; }; trap cleanup EXIT
          shopt -s nullglob; for IMG in "$OUT_IMG_DIR"/*.img; do if is_sparse "$IMG"; then RAW="${IMG%.img}.raw.img"; simg2img "$IMG" "$RAW" && mv -f "$RAW" "$IMG"; fi; done; shopt -u nullglob
          
          # This script will now process ALL .img files found in the output directory
          shopt -s nullglob; for IMG in "$OUT_IMG_DIR"/*.img; do
            PART="$(basename "$IMG" .img)"; echo "--- Processing: [$PART] ---"; DEST_PART_DIR="$OUT_APK_DIR/$PART"
            scan_and_copy_apks() {
              local search_root="$1"; for SUBDIR in "${APK_SUBDIRS[@]}"; do
                find "$search_root" -type d -name "$SUBDIR" -print0 2>/dev/null | while IFS= read -r -d '' SRC_DIR; do
                  if [ -d "$SRC_DIR" ]; then REL_PATH=$(realpath --relative-to="$search_root" "$SRC_DIR"); DEST_DIR="$DEST_PART_DIR/$REL_PATH"; mkdir -p "$DEST_DIR"; rsync -a --include="*.apk" --exclude="*" "$SRC_DIR/" "$DEST_DIR/"; fi
                done; done
            }
            if is_erofs "$IMG"; then
              echo "    -> EROFS detected."; EXDIR="$MOUNT_ROOT/${PART}_erofs_dump"; mkdir -p "$EXDIR"
              extract.erofs -i "$IMG" -x -o "$EXDIR"; scan_and_copy_apks "$EXDIR"; rm -rf "$EXDIR"
            else
              echo "    -> ext4/raw detected."; MP="$MOUNT_ROOT/$PART"; mkdir -p "$MP"
              if ! sudo mount -o ro,loop "$IMG" "$MP"; then rmdir "$MP" || true; continue; fi
              scan_and_copy_apks "$MP"; safe_umount "$MP"; rmdir "$MP" || true
            fi
          done; shopt -u nullglob
          EOF
          )"
          APK_COUNT=$(find out_apks -type f -name '*.apk' | wc -l || true); echo "total_apks=$APK_COUNT" >> "$GITHUB_OUTPUT"
      
      - name: Setup rclone
        if: steps.rclone_flag.outputs.has_rclone == 'true'
        run: |
          curl -fsSL https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          printf '%s\n' "${{ secrets.RCLONE_CONF }}" > ~/.config/rclone/rclone.conf
      
      - name: Upload APK folder
        if: steps.rclone_flag.outputs.has_rclone == 'true'
        id: rclup
        env:
          BASE: ${{ secrets.RCLONE_DESTINATION }}
        run: |
          ROM_BASE="$(basename "${{ github.event.inputs.ROM_URL }}")"; ROM_STEM="${ROM_BASE%.*}"
          DEST_PATH_INPUT="${{ github.event.inputs.DEST_PATH }}"; DEST_PATH_INPUT="${DEST_PATH_INPUT#/}"; DEST_PATH_INPUT="${DEST_PATH_INPUT%/}"
          if [ "${{ github.event.inputs.ADD_ROM_SUBFOLDER }}" = "true" ]; then DEST="${BASE%/}/${DEST_PATH_INPUT}/${ROM_STEM}/"; else DEST="${BASE%/}/${DEST_PATH_INPUT}/"; fi
          echo "dest=$DEST" >> "$GITHUB_OUTPUT"
          rclone copy "out_apks/" "$DEST" --transfers 16 --checkers 16 --onedrive-chunk-size 80M --create-empty-src-dirs
          printf 'Total APK files: %s\n' "${{ steps.extract.outputs.total_apks }}" > /tmp/INDEX.txt
          rclone copy /tmp/INDEX.txt "$DEST"
          
      - name: Generate Public Link
        if: steps.rclone_flag.outputs.has_rclone == 'true'
        id: link
        run: |
          LINK="$(rclone link --onedrive-link-type view --onedrive-link-scope anonymous "${{ steps.rclup.outputs.dest }}" 2>/dev/null || true)"
          [ -n "$LINK" ] && echo "::add-mask::$LINK"; echo "url=${LINK:-N/A}" >> "$GITHUB_OUTPUT"

      - name: Send Telegram Notification
        if: always()
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        run: |
          if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$TELEGRAM_CHAT_ID" ]; then
            echo "Telegram secrets not provided. Skipping notification."
            exit 0
          fi
          JOB_STATUS="${{ job.status }}"; ROM_FILENAME=$(basename "${{ github.event.inputs.ROM_URL }}"); REPO_NAME="${{ github.repository }}"
          WORKFLOW_RUN_URL="https://github.com/$REPO_NAME/actions/runs/${{ github.run_id }}"
          escape_markdown() { echo "$1" | sed -e 's/\([._*\[\]()~`>#+-=|{}.!]\)/\\\1/g'; }
          ROM_FILENAME_MD=$(escape_markdown "$ROM_FILENAME"); REPO_NAME_MD=$(escape_markdown "$REPO_NAME")
          if [ "$JOB_STATUS" = "success" ]; then
            MESSAGE="*✅ APK Extractor: Thành công*\n\n*ROM*: \`$ROM_FILENAME_MD\`\n*Tổng APK*: \`${{ steps.extract.outputs.total_apks }}\`\n*Repo*: [$REPO_NAME_MD]($WORKFLOW_RUN_URL)"
            PUBLIC_URL="${{ steps.link.outputs.url }}"
            if [ "$PUBLIC_URL" != "N/A" ]; then
              REPLY_MARKUP=$(jq -n --arg url "$PUBLIC_URL" '{inline_keyboard: [[{text: "✅ Mở Thư Mục", url: $url}]]}')
              JSON_PAYLOAD=$(jq -n --arg cid "$TELEGRAM_CHAT_ID" --arg txt "$MESSAGE" --argjson rkm "$REPLY_MARKUP" '{chat_id: $cid, text: $txt, parse_mode: "MarkdownV2", reply_markup: $rkm}')
            else
              JSON_PAYLOAD=$(jq -n --arg cid "$TELEGRAM_CHAT_ID" --arg txt "$MESSAGE" '{chat_id: $cid, text: $txt, parse_mode: "MarkdownV2"}')
            fi
          else
            MESSAGE="*❌ APK Extractor: Thất bại*\n\n*ROM*: \`$ROM_FILENAME_MD\`\n*Repo*: [$REPO_NAME_MD]($WORKFLOW_RUN_URL)\n\nHãy kiểm tra log để biết lỗi\."
            JSON_PAYLOAD=$(jq -n --arg cid "$TELEGRAM_CHAT_ID" --arg txt "$MESSAGE" '{chat_id: $cid, text: $txt, parse_mode: "MarkdownV2"}')
          fi
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" -H "Content-Type: application/json" -d "$JSON_PAYLOAD"

      - name: Job Summary
        if: always()
        run: |
          echo "## APK Extractor Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "- ROM: `${{ github.event.inputs.ROM_URL }}`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Total APKs Found: `${{ steps.extract.outputs.total_apks }}`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Job Status: `${{ job.status }}`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Remote folder: `${{ steps.rclup.outputs.dest || 'N/A' }}`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Public link: `${{ steps.link.outputs.url || 'N/A' }}`" >> "$GITHUB_STEP_SUMMARY"

