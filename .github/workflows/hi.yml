name: HI

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: "Direct URL to ROM (.zip) or payload.bin"
        required: true
      PARTITIONS:
        description: "Partitions to dump (e.g. system,product,system_ext). Empty = defaults to APK-bearing ones"
        required: false
        default: ""
      DEST_PATH:
        description: "Destination path in your remote (e.g. dumps/oneplus/oneplus6t)"
        required: true
        default: "dumps/device/unknown"
      ADD_ROM_SUBFOLDER:
        description: "Append a subfolder using ROM file stem (true/false)"
        required: false
        default: "true"
      AUTH_KEY:
        description: "Password to run (compared to WORKFLOW_AUTH_KEY secret)"
        required: true

jobs:
  auth_check:
    runs-on: ubuntu-22.04
    outputs:
      active: ${{ steps.check.outputs.active }}
    steps:
      - id: check
        run: echo "active=${{ github.event.inputs.AUTH_KEY == secrets.WORKFLOW_AUTH_KEY }}" >> "$GITHUB_OUTPUT"

  dump_apks_only:
    needs: auth_check
    if: ${{ needs.auth_check.outputs.active == 'true' }}
    runs-on: ubuntu-22.04
    env:
      TZ: Asia/Ho_Chi_Minh
      # Gate rclone steps via a boolean-like flag (string)
      HAS_RCLONE: ${{ (secrets.RCLONE_CONF != '' && secrets.RCLONE_DESTINATION != '') && 'true' || 'false' }}
      # Default APK-bearing partitions if input empty
      APK_PARTS_DEFAULT: system,product,system_ext,vendor,odm,oem
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maximize disk space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Install base dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            aria2 unzip curl file rsync bsdmainutils \
            android-sdk-libsparse-utils e2fsprogs util-linux \
            fuse3 python3 python3-venv python3-pip git

      - name: Build & install latest erofs-utils (provides erofsfuse/extract.erofs)
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential meson ninja-build pkg-config \
            libfuse3-dev liblz4-dev libzstd-dev liblzma-dev libselinux1-dev ca-certificates git
          git clone --depth=1 https://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs-utils.git
          cd erofs-utils
          meson setup build -Dfuse=true -Dliblzma=true -Dlibzstd=true
          ninja -C build
          sudo ninja -C build install
          which erofsfuse || true
          which extract.erofs || true
          erofsfuse -V || true

      - name: Setup Python venv + 5ec1cff/payload-dumper
        run: |
          set -euo pipefail
          python3 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip wheel
          pip install git+https://github.com/5ec1cff/payload-dumper.git \
                      brotli zstandard pycryptodome tqdm

      - name: Prepare workspace
        run: mkdir -p work out_imgs out_apks scripts /mnt/payload_mounts

      - name: Download ROM / payload.bin
        working-directory: work
        run: |
          set -euo pipefail
          echo "URL: ${{ github.event.inputs.ROM_URL }}"
          aria2c -x16 -s16 -j5 --file-allocation=none -o rom.bin "${{ github.event.inputs.ROM_URL }}"
          if file -b rom.bin | grep -qi "Zip archive"; then
            echo "[*] ZIP detected → unzip"
            unzip -q rom.bin -d romzip
            PBIN="$(find romzip -type f -name 'payload.bin' | head -n 1 || true)"
            if [[ -z "$PBIN" ]]; then
              echo "payload.bin not found in ZIP"
              exit 1
            fi
            mv "$PBIN" payload.bin
          else
            mv rom.bin payload.bin
          fi
          ls -lah

      - name: Dump partitions from payload.bin (5ec1cff)
        working-directory: work
        run: |
          set -euo pipefail
          source ../venv/bin/activate
          mkdir -p out_imgs
          PARTS_INPUT="${{ github.event.inputs.PARTITIONS }}"
          if [[ -z "$PARTS_INPUT" ]]; then
            PARTS="$APK_PARTS_DEFAULT"
          else
            PARTS="$PARTS_INPUT"
          fi
          echo "[*] Dump partitions: $PARTS"
          python -m payload_dumper --out out_imgs --partitions "$PARTS" payload.bin
          echo "[*] Dumped images:"
          ls -lah out_imgs

      - name: Extract APKs (EROFS/ext4 aware; erofsfuse fallback)
        run: |
          set -euo pipefail
          cat > scripts/apk_siphon.sh << 'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          OUT_IMG_DIR="work/out_imgs"
          OUT_APK_DIR="work/out_apks"
          MOUNT_ROOT="/mnt/payload_mounts"
          CANDIDATE_PARTS=("system" "product" "system_ext" "vendor" "odm" "oem")
          APK_DIRS=("system/app" "system/priv-app" "product/app" "system_ext/app" "vendor/app" "odm/app" "oem/app")

          mkdir -p "$OUT_IMG_DIR" "$OUT_APK_DIR" "$MOUNT_ROOT"

          has(){ command -v "$1" >/dev/null 2>&1; }
          is_sparse(){ file -b "$1" 2>/dev/null | grep -qi "Android sparse image"; }
          is_erofs(){ [[ "$(hexdump -s 1024 -n 4 -e '1/4 "%08x"' "$1" 2>/dev/null || true)" == "e0f5e1e2" ]]; }

          safe_umount(){
            local mp="$1"
            if mountpoint -q "$mp"; then
              fusermount3 -u "$mp" 2>/dev/null || sudo umount "$mp" || true
            fi
          }
          cleanup(){ for d in "$MOUNT_ROOT"/*; do [[ -d "$d" ]] && safe_umount "$d"; done; }
          trap cleanup EXIT

          shopt -s nullglob
          for IMG in "$OUT_IMG_DIR"/*.img; do
            if is_sparse "$IMG"; then
              RAW="${IMG%.img}.raw.img"
              echo "→ $(basename "$IMG") is sparse → simg2img"
              simg2img "$IMG" "$RAW" && mv "$RAW" "$IMG"
            fi
          done

          declare -A WANT=()
          for p in "${CANDIDATE_PARTS[@]}"; do WANT["$p"]=1; done

          for IMG in "$OUT_IMG_DIR"/*.img; do
            PART="$(basename "$IMG" .img)"
            [[ -n "${WANT[$PART]:-}" ]] || { echo "--- [$PART] (skip: not APK-bearing) ---"; continue; }

            echo "--- [$PART] ---"
            if is_erofs "$IMG"; then
              if has extract.erofs; then
                EXDIR="$OUT_APK_DIR/$PART/_fs"
                mkdir -p "$EXDIR"
                echo "   EROFS: extract.erofs → $EXDIR"
                extract.erofs -i "$IMG" -x -o "$EXDIR"
                for d in "${APK_DIRS[@]}"; do
                  SRC="$EXDIR/$d"; [[ -d "$SRC" ]] || continue
                  DEST="$OUT_APK_DIR/$PART/$d"; mkdir -p "$DEST"
                  rsync -a --include="*/" --include="*.apk" --exclude="*" "$SRC/" "$DEST/"
                done
                rm -rf "$EXDIR"
              elif has erofsfuse; then
                MP="$MOUNT_ROOT/$PART"
                mkdir -p "$MP"
                echo "   EROFS: erofsfuse → $MP"
                erofsfuse "$IMG" "$MP"
                for d in "${APK_DIRS[@]}"; do
                  SRC="$MP/$d"; [[ -d "$SRC" ]] || continue
                  DEST="$OUT_APK_DIR/$PART/$d"; mkdir -p "$DEST"
                  rsync -a --include="*/" --include="*.apk" --exclude="*" "$SRC/" "$DEST/"
                done
                safe_umount "$MP"
                rmdir "$MP" || true
              else
                echo "   ! Neither extract.erofs nor erofsfuse found — skipping $PART"
              fi
            else
              MP="$MOUNT_ROOT/$PART"
              mkdir -p "$MP"
              if ! sudo mount -o ro,loop "$IMG" "$MP"; then
                echo "   ! mount failed → skip $PART"
                rmdir "$MP" || true
                continue
              fi
              for d in "${APK_DIRS[@]}"; do
                SRC="$MP/$d"; [[ -d "$SRC" ]] || continue
                DEST="$OUT_APK_DIR/$PART/$d"; mkdir -p "$DEST"
                rsync -a --include="*/" --include="*.apk" --exclude="*" "$SRC/" "$DEST/"
              done
              safe_umount "$MP"
              rmdir "$MP" || true
            fi
          done
          EOF
          chmod +x scripts/apk_siphon.sh
          ./scripts/apk_siphon.sh
          echo "APK count: $(find work/out_apks -type f -name '*.apk' | wc -l || true)"
          echo "[*] Sample tree:"
          find work/out_apks -maxdepth 3 -type d | head -n 50 || true

      - name: Setup rclone (OneDrive)
        if: ${{ env.HAS_RCLONE == 'true' }}
        run: |
          set -euo pipefail
          curl -fsSL https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          printf '%s\n' "${RCLONE_CONF}" > ~/.config/rclone/rclone.conf
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}

      - name: Upload APK folder to OneDrive (preserve tree)
        if: ${{ env.HAS_RCLONE == 'true' }}
        id: rclup
        working-directory: work
        env:
          BASE: ${{ secrets.RCLONE_DESTINATION }}
          DEST_PATH_INPUT: ${{ github.event.inputs.DEST_PATH }}
          ADD_ROM_SUBFOLDER: ${{ github.event.inputs.ADD_ROM_SUBFOLDER }}
          ROM_URL: ${{ github.event.inputs.ROM_URL }}
        run: |
          set -euo pipefail
          set -x
          ROM_BASE="$(basename "$ROM_URL")"
          ROM_STEM="${ROM_BASE%.*}"
          DEST_PATH_INPUT="${DEST_PATH_INPUT#/}"
          DEST_PATH_INPUT="${DEST_PATH_INPUT%/}"
          if [[ "$ADD_ROM_SUBFOLDER" == "true" ]]; then
            DEST="${BASE%/}/${DEST_PATH_INPUT}/${ROM_STEM}/"
          else
            DEST="${BASE%/}/${DEST_PATH_INPUT}/"
          fi
          echo "dest=$DEST" >> "$GITHUB_OUTPUT"
          rclone mkdir "$DEST"
          rclone copy "out_apks/" "$DEST" --transfers 16 --checkers 16 --onedrive-chunk-size 64M --create-empty-src-dirs
          APK_COUNT=$(find out_apks -type f -name '*.apk' | wc -l || true)
          printf 'APK files: %s\n' "$APK_COUNT" > /tmp/INDEX.txt
          rclone copy /tmp/INDEX.txt "$DEST"
          echo "Uploaded to: $DEST"

      - name: Public link for APK folder (best-effort)
        if: ${{ env.HAS_RCLONE == 'true' }}
        id: link
        run: |
          set -euo pipefail
          LINK="$(rclone link --onedrive-link-type view --onedrive-link-scope anonymous "${{ steps.rclup.outputs.dest }}" 2>/dev/null || true)"
          [ -n "$LINK" ] && echo "::add-mask::$LINK"
          echo "url=${LINK:-N/A}" >> "$GITHUB_OUTPUT"

      - name: Job Summary
        if: always()
        run: |
          echo "## HI Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "- ROM: \`${{ github.event.inputs.ROM_URL }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- PARTITIONS: \`${{ github.event.inputs.PARTITIONS || env.APK_PARTS_DEFAULT }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- DEST_PATH: \`${{ github.event.inputs.DEST_PATH }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- ADD_ROM_SUBFOLDER: \`${{ github.event.inputs.ADD_ROM_SUBFOLDER }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- OneDrive APK folder: \`${{ steps.rclup.outputs.dest || 'N/A' }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Public link: \`${{ steps.link.outputs.url || 'N/A' }}\`" >> "$GITHUB_STEP_SUMMARY"
