name: HI

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: "Direct URL to ROM (.zip) or payload.bin"
        required: true
      PARTITIONS:
        description: "Partitions (e.g. system,product,system_ext). Empty = all"
        required: false
        default: ""
      DEST_PATH:
        description: "Remote path (e.g. dumps/oneplus/oneplus6t)"
        required: true
        default: "dumps/device/unknown"
      ADD_ROM_SUBFOLDER:
        description: "Append subfolder using ROM file stem (true/false)"
        required: false
        default: "true"
      AUTH_KEY:
        description: "Password to run (compared to WORKFLOW_AUTH_KEY)"
        required: true

jobs:
  auth_check:
    runs-on: ubuntu-22.04
    outputs:
      active: ${{ steps.check.outputs.active }}
    steps:
      - id: check
        run: echo "active=${{ github.event.inputs.AUTH_KEY == secrets.WORKFLOW_AUTH_KEY }}" >> "$GITHUB_OUTPUT"

  dump_apks_only:
    needs: auth_check
    if: ${{ needs.auth_check.outputs.active == 'true' }}
    runs-on: ubuntu-22.04
    env:
      TZ: Asia/Ho_Chi_Minh
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maximize disk space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Check rclone secrets present
        id: rclone_flag
        run: |
          set -euo pipefail
          if [ -n "${{ secrets.RCLONE_CONF }}" ] && [ -n "${{ secrets.RCLONE_DESTINATION }}" ]; then
            echo "has_rclone=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_rclone=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Install dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            aria2 unzip curl file rsync \
            android-sdk-libsparse-utils e2fsprogs util-linux \
            erofs-utils \
            python3 python3-venv python3-pip git

      - name: Setup Python venv + payload-dumper
        run: |
          set -euo pipefail
          python3 -m venv venv
          . venv/bin/activate
          pip install --upgrade pip wheel
          pip install git+https://github.com/5ec1cff/payload-dumper.git \
            brotli zstandard pycryptodome tqdm

      - name: Prepare workspace
        run: mkdir -p work out_imgs out_apks /mnt/payload_mounts

      - name: Download ROM / payload.bin
        working-directory: work
        run: |
          set -euo pipefail
          echo "URL: ${{ github.event.inputs.ROM_URL }}"
          aria2c -x16 -s16 -j5 --file-allocation=none -o rom.bin "${{ github.event.inputs.ROM_URL }}"
          if file -b rom.bin | grep -qi "Zip archive"; then
            unzip -q rom.bin -d romzip
            PBIN="$(find romzip -type f -name 'payload.bin' | head -n 1 || true)"
            if [ -z "$PBIN" ]; then echo "payload.bin not found in ZIP"; exit 1; fi
            mv "$PBIN" payload.bin
          else
            mv rom.bin payload.bin
          fi
          ls -lah

      - name: Dump partitions from payload.bin
        working-directory: work
        run: |
          set -euo pipefail
          . ../venv/bin/activate
          mkdir -p ../out_imgs
          PARTS_INPUT="${{ github.event.inputs.PARTITIONS }}"
          if [ -z "$PARTS_INPUT" ]; then
            echo "[*] No partitions specified, dumping all."
            python3 -m payload_dumper -o ../out_imgs payload.bin
          else
            echo "[*] Dumping specified partitions: $PARTS_INPUT"
            python3 -m payload_dumper -o ../out_imgs --partitions "$PARTS_INPUT" payload.bin
          fi
          ls -lah ../out_imgs

      - name: Extract APKs from all partitions
        run: |
          set -euo pipefail
          bash -c "$(cat <<'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          OUT_IMG_DIR="out_imgs"; OUT_APK_DIR="out_apks"; MOUNT_ROOT="/mnt/payload_mounts"
          is_sparse() { file -b "$1" 2>/dev/null | grep -qi "Android sparse image"; }
          is_erofs() { [[ "$(hexdump -s 1024 -n 4 -e '1/4 "%08x"' "$1" 2>/dev/null || true)" == "e0f5e1e2" ]]; }
          safe_umount() { local mp="$1"; if mountpoint -q "$mp"; then sudo umount "$mp" || true; fi; }
          cleanup() { for d in "$MOUNT_ROOT"/*; do [[ -d "$d" ]] && safe_umount "$d"; done; }
          trap cleanup EXIT
          echo "[*] Normalizing images…"; shopt -s nullglob
          for IMG in "$OUT_IMG_DIR"/*.img; do
            if is_sparse "$IMG"; then RAW="${IMG%.img}.raw.img"; simg2img "$IMG" "$RAW" && mv -f "$RAW" "$IMG"; fi
          done
          echo "[*] Extracting APKs from ALL partitions…";
          for IMG in "$OUT_IMG_DIR"/*.img; do
            PART="$(basename "$IMG" .img)"; echo "--- Processing: [$PART] ---"
            DEST_PART_DIR="$OUT_APK_DIR/$PART"; mkdir -p "$DEST_PART_DIR"
            if is_erofs "$IMG"; then
              EXDIR="$MOUNT_ROOT/${PART}_erofs_dump"; mkdir -p "$EXDIR"; extract.erofs -i "$IMG" -x -o "$EXDIR"
              rsync -a -m --include='**/*.apk' --include='*/' --exclude='*' "$EXDIR/" "$DEST_PART_DIR/"; rm -rf "$EXDIR"
            else
              MP="$MOUNT_ROOT/$PART"; mkdir -p "$MP"
              if ! sudo mount -o ro,loop "$IMG" "$MP"; then rmdir "$MP" || true; continue; fi
              rsync -a -m --include='**/*.apk' --include='*/' --exclude='*' "$MP/" "$DEST_PART_DIR/"; safe_umount "$MP"; rmdir "$MP" || true
            fi
          done; shopt -u nullglob; echo "[✓] APKs extracted to: $OUT_APK_DIR"
          EOF
          )"
          echo "Total APKs: $(find out_apks -type f -name '*.apk' | wc -l || true)"

      - name: Setup rclone (OneDrive)
        if: steps.rclone_flag.outputs.has_rclone == 'true'
        run: |
          set -euo pipefail
          curl -fsSL https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          printf '%s\n' "${{ secrets.RCLONE_CONF }}" > ~/.config/rclone/rclone.conf

      - name: Upload APK folder to OneDrive (preserve tree)
        if: steps.rclone_flag.outputs.has_rclone == 'true'
        id: rclup
        env:
          BASE: ${{ secrets.RCLONE_DESTINATION }}
          DEST_PATH_INPUT: ${{ github.event.inputs.DEST_PATH }}
          ADD_ROM_SUBFOLDER: ${{ github.event.inputs.ADD_ROM_SUBFOLDER }}
          ROM_URL: ${{ github.event.inputs.ROM_URL }}
        run: |
          set -euo pipefail; ROM_BASE="$(basename "$ROM_URL")"; ROM_STEM="${ROM_BASE%.*}"; DEST_PATH_INPUT="${DEST_PATH_INPUT#/}"; DEST_PATH_INPUT="${DEST_PATH_INPUT%/}"
          if [ "$ADD_ROM_SUBFOLDER" = "true" ]; then DEST="${BASE%/}/${DEST_PATH_INPUT}/${ROM_STEM}/"; else DEST="${BASE%/}/${DEST_PATH_INPUT}/"; fi
          echo "dest=$DEST" >> "$GITHUB_OUTPUT"; rclone mkdir "$DEST"; rclone copy "out_apks/" "$DEST" --transfers 16 --checkers 16 --onedrive-chunk-size 80M --create-empty-src-dirs
          APK_COUNT=$(find out_apks -type f -name '*.apk' | wc -l || true); printf 'APK files: %s\n' "$APK_COUNT" > /tmp/INDEX.txt; rclone copy /tmp/INDEX.txt "$DEST"

      - name: Public link for APK folder (best-effort)
        if: steps.rclone_flag.outputs.has_rclone == 'true'
        id: link
        run: |
          set -euo pipefail
          LINK="$(rclone link --onedrive-link-type view --onedrive-link-scope anonymous "${{ steps.rclup.outputs.dest }}" 2>/dev/null || true)"
          [ -n "$LINK" ] && echo "::add-mask::$LINK"; echo "url=${LINK:-N/A}" >> "$GITHUB_OUTPUT"

      - name: Job Summary
        if: always()
        run: |
          echo "## HI Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "- ROM: `${{ github.event.inputs.ROM_URL }}`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Rclone enabled: `${{ steps.rclone_flag.outputs.has_rclone }}`" >> "$GITHUB_STEP_SUMMARY"
          echo "- OneDrive APK folder: `${{ steps.rclup.outputs.dest || 'N/A' }}`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Public link: `${{ steps.link.outputs.url || 'N/A' }}`" >> "$GITHUB_STEP_SUMMARY"

      # --- BƯỚC MỚI ĐƯỢC THÊM VÀO ---
      - name: Send Telegram Notification
        # 'if: always()' đảm bảo bước này luôn chạy, dù job thành công hay thất bại
        if: always()
        uses: appleboy/telegram-action@master
        with:
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          format: markdown
          message: |
            ${{ job.status == 'success' && '✅ **THÀNH CÔNG**' || '❌ **THẤT BẠI**' }}

            **Job Status:** `${{ job.status }}`
            **ROM:** `${{ github.event.inputs.ROM_URL }}`
            
            ${{ job.status == 'success' && format('**Thư mục OneDrive:** `{0}`', steps.rclup.outputs.dest) || '' }}
            ${{ job.status == 'success' && format('**Link công khai:** {0}', steps.link.outputs.url) || '' }}

            **Xem chi tiết tại:**
            ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
