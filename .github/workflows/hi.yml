name: HI

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: "Direct URL tới ROM (.zip) hoặc payload.bin"
        required: true
      PARTITIONS:
        description: "Phân vùng cần dump (vd: system,product,system_ext). Để trống = tất cả"
        required: false
        default: ""
      AUTH_KEY:
        description: "Mật khẩu chạy workflow (so với WORKFLOW_AUTH_KEY)"
        required: true

jobs:
  auth_check:
    runs-on: ubuntu-22.04
    outputs:
      active: ${{ steps.check.outputs.active }}
    steps:
      - id: check
        run: echo "active=${{ github.event.inputs.AUTH_KEY == secrets.WORKFLOW_AUTH_KEY }}" >> "$GITHUB_OUTPUT"

  dump_and_upload:
    needs: auth_check
    if: ${{ needs.auth_check.outputs.active == 'true' }}
    runs-on: ubuntu-22.04
    env:
      TZ: Asia/Ho_Chi_Minh
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Maximize disk space
        uses: easimon/maximize-build-space@v10
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"
          remove-codeql: "true"

      - name: Install deps
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            aria2 unzip curl file rsync zstd lz4 brotli hexdump \
            android-sdk-libsparse-utils erofs-utils e2fsprogs util-linux \
            python3 python3-venv python3-pip git
          # Fallback dumper (Python)
          python3 -m venv venv && source venv/bin/activate
          pip install --upgrade pip && pip install payload-dumper
          # payload-dumper-go (binary)
          cd /usr/local/bin
          curl -L -o payload-dumper-go https://github.com/ssut/payload-dumper-go/releases/latest/download/payload-dumper-go_linux_amd64
          chmod +x payload-dumper-go
          payload-dumper-go -v || true

      - name: Prepare workspace
        run: mkdir -p work out_imgs out_apks scripts /mnt/payload_mounts

      - name: Download ROM / payload.bin
        working-directory: work
        run: |
          set -euo pipefail
          echo "URL: ${{ github.event.inputs.ROM_URL }}"
          aria2c -x16 -s16 -j5 --file-allocation=none -o rom.bin "${{ github.event.inputs.ROM_URL }}"
          if file -b rom.bin | grep -qi "Zip archive"; then
            echo "[*] ZIP detected → unzip"
            unzip -q rom.bin -d romzip
            PBIN="$(find romzip -type f -name 'payload.bin' | head -n 1 || true)"
            if [[ -z "$PBIN" ]]; then echo "Không tìm thấy payload.bin trong ZIP"; exit 1; fi
            mv "$PBIN" payload.bin
          else
            mv rom.bin payload.bin
          fi
          ls -lah

      - name: Dump partitions from payload.bin
        working-directory: work
        run: |
          set -euo pipefail
          mkdir -p out_imgs
          if [[ -n "${{ github.event.inputs.PARTITIONS }}" ]]; then
            echo "[*] Dump partitions: ${{ github.event.inputs.PARTITIONS }}"
            /usr/local/bin/payload-dumper-go -o out_imgs -p "${{ github.event.inputs.PARTITIONS }}" payload.bin
          else
            echo "[*] Dump all partitions"
            /usr/local/bin/payload-dumper-go -o out_imgs payload.bin
          fi
          # Fallback nếu binary lỗi
          if [ "$(ls -1 out_imgs/*.img 2>/dev/null | wc -l)" -eq 0 ]; then
            echo "[!] Fallback to Python payload-dumper"
            source ../venv/bin/activate
            if [[ -n "${{ github.event.inputs.PARTITIONS }}" ]]; then
              payload-dumper --out out_imgs --partitions "${{ github.event.inputs.PARTITIONS }}" payload.bin
            else
              payload-dumper --out out_imgs payload.bin
            fi
          fi
          ls -lah out_imgs

      - name: Extract APKs (EROFS/ext4 aware)
        run: |
          set -euo pipefail
          cat > scripts/apk_siphon.sh << 'EOF'
          #!/usr/bin/env bash
          set -euo pipefail
          OUT_IMG_DIR="work/out_imgs"; OUT_APK_DIR="work/out_apks"; MOUNT_ROOT="/mnt/payload_mounts"
          APK_DIRS=("system/app" "system/priv-app" "product/app" "system_ext/app" "vendor/app" "odm/app" "oem/app")
          mkdir -p "$OUT_IMG_DIR" "$OUT_APK_DIR" "$MOUNT_ROOT"
          is_sparse(){ file -b "$1" 2>/dev/null | grep -qi "Android sparse image"; }
          is_erofs(){ [[ "$(hexdump -s 1024 -n 4 -e '1/4 "%08x"' "$1" 2>/dev/null || true)" == "e0f5e1e2" ]]; }
          safe_umount(){ mountpoint -q "$1" && sudo umount "$1" || true; }
          trap 'for d in "$MOUNT_ROOT"/*; do [[ -d "$d" ]] && safe_umount "$d"; done' EXIT

          shopt -s nullglob
          for IMG in "$OUT_IMG_DIR"/*.img; do
            if is_sparse "$IMG"; then
              RAW="${IMG%.img}.raw.img"; echo "→ $(basename "$IMG") is sparse → simg2img"
              simg2img "$IMG" "$RAW" && mv "$RAW" "$IMG"
            fi
          done

          for IMG in "$OUT_IMG_DIR"/*.img; do
            PART="$(basename "$IMG" .img)"; echo "--- [$PART] ---"
            if is_erofs "$IMG"; then
              EXDIR="$OUT_APK_DIR/$PART/_fs"; mkdir -p "$EXDIR"
              extract.erofs -i "$IMG" -x -o "$EXDIR"
              for d in "${APK_DIRS[@]}"; do
                SRC="$EXDIR/$d"; [[ -d "$SRC" ]] || continue
                DEST="$OUT_APK_DIR/$PART/$d"; mkdir -p "$DEST"
                rsync -a --include="*/" --include="*.apk" --exclude="*" "$SRC/" "$DEST/"
              done
              rm -rf "$EXDIR"
            else
              MP="$MOUNT_ROOT/$PART"; mkdir -p "$MP"
              if ! sudo mount -o ro,loop "$IMG" "$MP"; then echo "  ! mount fail → skip $PART"; rmdir "$MP" || true; continue; fi
              for d in "${APK_DIRS[@]}"; do
                SRC="$MP/$d"; [[ -d "$SRC" ]] || continue
                DEST="$OUT_APK_DIR/$PART/$d"; mkdir -p "$DEST"
                rsync -a --include="*/" --include="*.apk" --exclude="*" "$SRC/" "$DEST/"
              done
              safe_umount "$MP"; rmdir "$MP" || true
            fi
          done

          echo "APK count: $(find "$OUT_APK_DIR" -type f -name '*.apk' | wc -l)"
          EOF
          chmod +x scripts/apk_siphon.sh
          ./scripts/apk_siphon.sh

      - name: Pack artifacts
        working-directory: work
        run: |
          set -euo pipefail
          tar --zstd -cf out_imgs.tar.zst out_imgs
          tar --zstd -cf out_apks.tar.zst out_apks
          sha256sum out_imgs.tar.zst out_apks.tar.zst | tee SHA256SUMS.txt
          ls -lah

      - name: Upload artifacts (GitHub)
        uses: actions/upload-artifact@v4
        with:
          name: dump_outputs
          path: |
            work/out_imgs.tar.zst
            work/out_apks.tar.zst
            work/SHA256SUMS.txt
          compression-level: 0
          retention-days: 7

      # OneDrive upload qua rclone (dùng secrets bạn đã cấp)
      - name: Setup rclone (OneDrive)
        if: ${{ secrets.RCLONE_CONF && secrets.RCLONE_DESTINATION }}
        run: |
          set -euo pipefail
          curl -fsSL https://rclone.org/install.sh | sudo bash
          mkdir -p ~/.config/rclone
          printf '%s\n' "${RCLONE_CONF}" > ~/.config/rclone/rclone.conf
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}

      - name: Upload to OneDrive
        if: ${{ secrets.RCLONE_CONF && secrets.RCLONE_DESTINATION }}
        id: rclup
        working-directory: work
        run: |
          set -euo pipefail
          # Ví dụ RCLONE_DESTINATION = onedrive:/Dump
          BASE="${{ secrets.RCLONE_DESTINATION }}"
          ROM_BASE="$(basename "${{ github.event.inputs.ROM_URL }}")"
          ROM_STEM="${ROM_BASE%.*}"
          DEST="${BASE%/}/Rom/${ROM_STEM}/"
          echo "dest=$DEST" >> "$GITHUB_OUTPUT"
          rclone mkdir "$DEST"
          rclone copy out_imgs.tar.zst "$DEST" --transfers 8 --onedrive-chunk-size 64M || true
          rclone copy out_apks.tar.zst "$DEST" --transfers 8 --onedrive-chunk-size 64M || true
          rclone copy SHA256SUMS.txt "$DEST" --transfers 8 --onedrive-chunk-size 64M || true
          echo "Uploaded to: $DEST"

      - name: Generate OneDrive public link
        if: ${{ steps.rclup.outputs.dest }}
        id: link
        run: |
          set -euo pipefail
          PUBLIC_LINK="$(rclone link --onedrive-link-type view --onedrive-link-scope anonymous "${{ steps.rclup.outputs.dest }}" 2>/dev/null || true)"
          [ -n "$PUBLIC_LINK" ] && echo "::add-mask::$PUBLIC_LINK"
          echo "url=${PUBLIC_LINK:-N/A}" >> "$GITHUB_OUTPUT"

      - name: Telegram notify (optional)
        if: ${{ success() && secrets.TELEGRAM_BOT_TOKEN && secrets.TELEGRAM_CHAT_ID }}
        uses: appleboy/telegram-action@v0.1.1
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ✅ **HI** xong!
            ROM: `${{ github.event.inputs.ROM_URL }}`
            PARTITIONS: `${{ github.event.inputs.PARTITIONS }}`
            OneDrive: `${{ steps.rclup.outputs.dest || 'N/A' }}`
            Link: ${{ steps.link.outputs.url || 'N/A' }}

      - name: Job Summary
        if: always()
        run: |
          echo "## HI Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "- ROM: \`${{ github.event.inputs.ROM_URL }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- PARTITIONS: \`${{ github.event.inputs.PARTITIONS }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- APKs: \`$(find work/out_apks -type f -name "*.apk" 2>/dev/null | wc -l)\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- OneDrive dest: \`${{ steps.rclup.outputs.dest || 'N/A' }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Public link: \`${{ steps.link.outputs.url || 'N/A' }}\`" >> "$GITHUB_STEP_SUMMARY"
