# Workflow name
name: DUMP

# Allows manual triggering from the GitHub Actions UI
on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'Direct URL to the OTA ROM file (.zip)'
        required: true
      PARTITIONS:
        description: 'Comma-separated partitions to dump. Leave empty to dump all.'
        required: false
        default: ''
      AUTH_KEY:
        description: 'Password to run the workflow'
        required: true

jobs:
  auth_check:
    runs-on: ubuntu-latest
    outputs:
      active: ${{ steps.check_key.outputs.active }}
    steps:
      - name: Check Authentication Key
        id: check_key
        # Compare the user-provided key with the repository secret
        run: echo "active=${{ github.event.inputs.AUTH_KEY == secrets.WORKFLOW_AUTH_KEY }}" >> $GITHUB_OUTPUT

  dump_firmware:
    # This job depends on the success of the auth_check job
    needs: auth_check
    if: ${{ needs.auth_check.outputs.active == 'true' }}
    runs-on: ubuntu-latest
    steps:
      # Step 1: Clean up runner space using user-provided steps
      - name: Clean 1
        run: |
          docker rmi `docker images -q` || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d || true
          sudo apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo apt -y autoremove --purge || true
          sudo apt -y autoclean || true
          sudo apt clean || true
      - name: Clean 2
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"

      # Step 2: Install necessary dependencies (including erofs-utils)
      - name: Install Dependencies
        run: |
          sudo apt-get update
          echo "Installing system packages..."
          sudo apt-get install -y --no-install-recommends \
            aria2 android-sdk-libsparse-utils p7zip-full python3-pip git rclone bsdmainutils erofs-utils
          echo "Installing payload-dumper..."
          pip3 install git+https://github.com/5ec1cff/payload-dumper

      # Step 3: Set Vietnam Timezone
      - name: Set Vietnam Timezone
        run: |
          echo "Setting Vietnam timezone"
          sudo timedatectl set-timezone Asia/Ho_Chi_Minh

      # Step 4: Download the ROM file from the provided URL
      - name: Download ROM
        run: |
          echo "Downloading ROM from ${{ github.event.inputs.ROM_URL }}..."
          aria2c -x16 -s16 -j5 --file-allocation=none -o rom.zip "${{ github.event.inputs.ROM_URL }}"
          echo "Download complete."

      # Step 5: Dump specified partitions from payload.bin
      - name: Dump Partitions from payload.bin
        run: |
          echo "Dumping partitions: ${{ github.event.inputs.PARTITIONS }}"
          payload_dumper --out dumped_partitions --partitions "${{ github.event.inputs.PARTITIONS }}" rom.zip
          echo "Partitions dumped to 'dumped_partitions' directory."

      # Step 6: Extract files from the partition image files (.img)
      - name: Extract Files from Partition Images
        run: |
          mkdir -p extracted_files
          echo "Starting extraction from partition images..."
          for img_file in dumped_partitions/*.img; do
            partition_name=$(basename "$img_file" .img)
            echo "--- Processing $partition_name ---"

            output_dir="extracted_files/$partition_name"
            mkdir -p "$output_dir"
            
            # Convert sparse image to raw image if necessary
            raw_image="dumped_partitions/$partition_name.raw"
            echo "Converting sparse image to raw for $partition_name..."
            simg2img "$img_file" "$raw_image" || {
              echo "$img_file is not a sparse image. Using original file."
              cp "$img_file" "$raw_image"
            }

            # Check for EROFS magic number (0xE0F5E1E2) at offset 1024
            if [ "$(hexdump -s 1024 -n 4 -e '1/4 "%08x"' "$raw_image")" = "e0f5e1e2" ]; then
              echo "EROFS filesystem detected. Extracting files..."
              if sudo extract.erofs -i "$raw_image" -o "$output_dir" -T0 -x; then
                echo "Successfully extracted files from $partition_name."
              else
                echo "An error occurred while extracting EROFS files from $partition_name.raw."
              fi
            else
              echo "Skipping extraction for $partition_name.raw as it is not an EROFS filesystem. Copying the raw image instead."
              cp "$raw_image" "$output_dir/"
            fi
          done
          echo "File extraction complete."

      # Step 7: Configure Rclone and upload the extracted folder to the cloud
      - name: Set up Rclone and Upload Folder
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
          # The base path for your cloud remote (e.g., 'gdrive:my_folder')
          RCLONE_DESTINATION: ${{ secrets.RCLONE_DESTINATION }}
        run: |
          if [ -z "$RCLONE_CONF" ] || [ -z "$RCLONE_DESTINATION" ]; then
            echo "RCLONE_CONF or RCLONE_DESTINATION secret is not set. Skipping upload."
            exit 0
          fi
          echo "Setting up Rclone..."
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONF" > ~/.config/rclone/rclone.conf
          
          # Create a remote folder name based on the downloaded ROM filename
          ROM_FILENAME=$(basename "${{ github.event.inputs.ROM_URL }}")
          REMOTE_FOLDER_NAME=$(echo "$ROM_FILENAME" | sed 's/\.zip$//')
          
          # Construct the final destination path
          FINAL_DESTINATION="${RCLONE_DESTINATION}/Rom/${REMOTE_FOLDER_NAME}"
          
          echo "Uploading 'extracted_files' folder to ${FINAL_DESTINATION}..."
          rclone copy ./extracted_files/ "${FINAL_DESTINATION}" -P --drive-chunk-size 64M --transfers 16
          echo "Upload complete."

