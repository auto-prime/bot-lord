# Workflow name
name: DUMP

# Allows manual triggering from the GitHub Actions UI
on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'Direct URL to the OTA ROM file (.zip)'
        required: true
      PARTITIONS:
        description: 'Comma-separated list of partitions to dump (e.g., system,vendor,product)'
        required: true
        default: 'system,vendor,product'
      RCLONE_REMOTE:
        description: 'Rclone destination path (e.g., mydrive:myfolder/rom_dumps)'
        required: true
      AUTH_KEY:
        description: 'Password to run the workflow'
        required: true

jobs:
  auth_check:
    runs-on: ubuntu-latest
    outputs:
      active: ${{ steps.check_key.outputs.active }}
    steps:
      - name: Check Authentication Key
        id: check_key
        # Compare the user-provided key with the repository secret
        run: echo "active=${{ github.event.inputs.AUTH_KEY == secrets.WORKFLOW_AUTH_KEY }}" >> $GITHUB_OUTPUT

  dump_firmware:
    # This job depends on the success of the auth_check job
    needs: auth_check
    if: ${{ needs.auth_check.outputs.active == 'true' }}
    runs-on: ubuntu-latest
    steps:
        
        # Step 1: CLEAN
       - name: Clean 1
         run: |
            docker rmi `docker images -q` || true
            sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d || true
            sudo apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
            sudo apt -y autoremove --purge || true
            sudo apt -y autoclean || true
            sudo apt clean || true
       - name: Clean 2
         uses: easimon/maximize-build-space@master
         with:
            root-reserve-mb: 512
            swap-size-mb: 1024
            remove-dotnet: "true"
            remove-android: "true"
            remove-haskell: "true"

      # Step 2: Install necessary dependencies
      - name: Install Dependencies
        run: |
          sudo apt-get update
          echo "Installing system packages..."
          sudo apt-get install -y --no-install-recommends \
            aria2 android-sdk-libsparse-utils p7zip-full python3-pip git autoconf libtool pkg-config \
            uuid-dev liblz4-dev libselinux1-dev rsync
          echo "Installing payload-dumper..."
          pip3 install git+https://github.com/5ec1cff/payload-dumper

      # Step 3: Install erofs-utils from source
      - name: Install erofs-utils
        run: |
          echo "Cloning and building erofs-utils..."
          git clone https://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs-utils.git
          cd erofs-utils
          ./autogen.sh
          ./configure
          make
          sudo make install
          cd ..
          echo "erofs-utils installed."

      # Step 4: Download the ROM file from the provided URL
      - name: Download ROM
        run: |
          echo "Downloading ROM from ${{ github.event.inputs.ROM_URL }}..."
          aria2c -x16 -s16 -j5 --file-allocation=none -o rom.zip "${{ github.event.inputs.ROM_URL }}"
          echo "Download complete."

      # Step 5: Dump specified partitions from payload.bin
      - name: Dump Partitions from payload.bin
        run: |
          echo "Dumping partitions: ${{ github.event.inputs.PARTITIONS }}"
          payload_dumper --out dumped_partitions --partitions "${{ github.event.inputs.PARTITIONS }}" rom.zip
          echo "Partitions dumped to 'dumped_partitions' directory."

      # Step 6: Extract files from the partition image files (.img)
      - name: Extract Files from Partition Images
        run: |
          mkdir -p extracted_files
          echo "Starting extraction from partition images..."
          for img_file in dumped_partitions/*.img; do
            partition_name=$(basename "$img_file" .img)
            echo "--- Processing $partition_name ---"

            mkdir -p "extracted_files/$partition_name"
            
            # Convert sparse image to raw image if necessary
            echo "Converting sparse image to raw for $partition_name..."
            simg2img "$img_file" "dumped_partitions/$partition_name.raw" || {
              echo "$img_file is not a sparse image. Using original file."
              cp "$img_file" "dumped_partitions/$partition_name.raw"
            }

            # Mount the raw image using erofsfuse and copy files
            mkdir -p mnt
            echo "Attempting to mount $partition_name.raw with erofsfuse..."
            if sudo erofsfuse "dumped_partitions/$partition_name.raw" mnt; then
              echo "Mount successful. Copying files from $partition_name..."
              # Use rsync for more efficient copying
              sudo rsync -a mnt/ "extracted_files/$partition_name/"
              sudo umount mnt
              echo "Unmounted $partition_name."
            else
              echo "Could not mount $partition_name.raw with erofsfuse. It might not be an EROFS filesystem."
            fi
            sudo rm -rf mnt
          done
          echo "File extraction complete."

      # Step 7: Configure Rclone and upload the extracted folder to the cloud
      - name: Set up Rclone and Upload Folder
        env:
          # A secret named RCLONE_CONF must be created in the GitHub repository settings
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
        run: |
          if [ -z "$RCLONE_CONF" ]; then
            echo "RCLONE_CONF secret is not set. Skipping upload."
            exit 0
          fi
          echo "Setting up Rclone..."
          mkdir -p ~/.config/rclone
          echo "$RCLONE_CONF" > ~/.config/rclone/rclone.conf
          
          # Create a remote folder name based on the ROM filename
          ROM_FILENAME=$(basename "${{ github.event.inputs.ROM_URL }}")
          REMOTE_FOLDER_NAME=$(echo "$ROM_FILENAME" | sed 's/\.zip$//')-FIRMWARE
          
          echo "Uploading 'extracted_files' folder to ${{ github.event.inputs.RCLONE_REMOTE }}/$REMOTE_FOLDER_NAME..."
          rclone copy ./extracted_files/ "${{ github.event.inputs.RCLONE_REMOTE }}/$REMOTE_FOLDER_NAME" -P --drive-chunk-size 64M --transfers 16
          echo "Upload complete."

