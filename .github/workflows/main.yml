name: DUMP

on:
  workflow_dispatch:
    inputs:
      ROM_URL:
        description: 'Direct URL to the OTA ROM file (.zip)'
        required: true
      PARTITIONS:
        description: 'Comma-separated partitions to dump. Leave empty to dump all.'
        required: false
        default: ''
      AUTH_KEY:
        description: 'Password to run the workflow'
        required: true

jobs:
  auth_check:
    runs-on: ubuntu-22.04
    outputs:
      active: ${{ steps.check_key.outputs.active }}
    steps:
      - name: Check Authentication Key
        id: check_key
        run: echo "active=${{ github.event.inputs.AUTH_KEY == secrets.WORKFLOW_AUTH_KEY }}" >> "$GITHUB_OUTPUT"

  dump_firmware:
    needs: auth_check
    if: ${{ needs.auth_check.outputs.active == 'true' }}
    runs-on: ubuntu-22.04
    env:
      TZ: Asia/Ho_Chi_Minh
    steps:
      # 1a) Manual Clean Up
      - name: Manual Clean Up
        run: |
          docker rmi `docker images -q` || true
          sudo rm -rf /usr/share/dotnet /etc/mysql /etc/php /etc/sudo apt/sources.list.d || true
          sudo apt -y purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php* || true
          sudo apt -y autoremove --purge || true
          sudo apt -y autoclean || true
          sudo apt clean || true
      
      # 1b) Clean runner space using action
      - name: Clean Runner Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 512
          swap-size-mb: 1024
          remove-dotnet: "true"
          remove-android: "true"
          remove-haskell: "true"

      # 2) Install dependencies
      - name: Install Dependencies
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            aria2 android-sdk-libsparse-utils p7zip-full python3-pip git rclone bsdmainutils erofs-utils
          pip3 install --no-cache-dir git+https://github.com/5ec1cff/payload-dumper

      # 3) Set timezone
      - name: Set Vietnam Timezone
        run: |
          set -euo pipefail
          sudo timedatectl set-timezone Asia/Ho_Chi_Minh || true
          echo "Current time: $(date)"

      # 4) Download ROM
      - name: Download ROM
        run: |
          set -euo pipefail
          echo "Downloading ROM from: ${{ github.event.inputs.ROM_URL }}"
          aria2c -x16 -s16 -j5 --file-allocation=none -o rom.zip "${{ github.event.inputs.ROM_URL }}"

      # 5) Dump partitions from payload.bin
      - name: Dump Partitions from payload.bin
        run: |
          set -euo pipefail
          echo "Partitions to dump: '${{ github.event.inputs.PARTITIONS }}'"
          payload_dumper --out dumped_partitions --partitions "${{ github.event.inputs.PARTITIONS }}" rom.zip

      # 6) Extract files from EROFS images
      - name: Extract Files from Partition Images
        run: |
          set -euo pipefail
          mkdir -p extracted_files

          is_erofs() {
            local img="$1"
            # Redirect stderr to /dev/null to suppress errors from non-image files
            [ "$(hexdump -s 1024 -n 4 -e '1/4 "%08x"' "$img" 2>/dev/null)" = "e0f5e1e2" ]
          }

          # Directly define and check for the tool's standard path
          EXTRACT_EROFS="extract.erofs"
          if ! [ -x "${EXTRACT_EROFS}" ]; then
            echo "WARNING: extract.erofs not found at ${EXTRACT_EROFS}. EROFS partitions will not be extracted."
            EXTRACT_EROFS="" # Clear the variable to trigger fallback copy
          fi

          echo "Starting extraction..."
          shopt -s nullglob
          for img_file in dumped_partitions/*.img; do
            partition_name="$(basename "$img_file" .img)"
            echo "--- Processing ${partition_name} ---"
            if is_erofs "$img_file"; then
              echo "EROFS detected for ${partition_name}"
              if [ -n "${EXTRACT_EROFS}" ]; then
                out_dir="extracted_files/${partition_name}"
                mkdir -p "${out_dir}"
                "${EXTRACT_EROFS}" -i "$img_file" -o "${out_dir}"
                echo "Extracted to ${out_dir}"
              else
                echo "extract.erofs missing → copying raw image."
                cp -f "$img_file" "extracted_files/${partition_name}.img"
              fi
            else
              echo "Not EROFS → copying ${partition_name}.img"
              cp -f "$img_file" "extracted_files/${partition_name}.img"
            fi
          done

      # 7) Configure rclone & upload
      - name: Set up Rclone and Upload Folder
        id: rclone_upload
        env:
          RCLONE_CONF: ${{ secrets.RCLONE_CONF }}
          RCLONE_DESTINATION: ${{ secrets.RCLONE_DESTINATION }}
        run: |
          set -euo pipefail
          if [ -z "${RCLONE_CONF:-}" ] || [ -z "${RCLONE_DESTINATION:-}" ]; then
            echo "RCLONE_CONF or RCLONE_DESTINATION not set. Skipping upload."
            echo "ROM_FILENAME=" >> "$GITHUB_OUTPUT"
            echo "FINAL_DESTINATION=" >> "$GITHUB_OUTPUT"
            exit 0
          fi

          mkdir -p ~/.config/rclone
          printf '%s\n' "$RCLONE_CONF" > ~/.config/rclone/rclone.conf

          ROM_FILENAME="$(basename "${{ github.event.inputs.ROM_URL }}")"
          REMOTE_FOLDER_NAME="$(echo "$ROM_FILENAME" | sed 's/\.zip$//')"
          FINAL_DESTINATION="${RCLONE_DESTINATION}/Rom/${REMOTE_FOLDER_NAME}"

          echo "ROM_FILENAME=${ROM_FILENAME}" >> "$GITHUB_OUTPUT"
          echo "FINAL_DESTINATION=${FINAL_DESTINATION}" >> "$GITHUB_OUTPUT"

          echo "Uploading 'extracted_files' → ${FINAL_DESTINATION}"
          rclone copy -v ./extracted_files/ "${FINAL_DESTINATION}" --drive-chunk-size 64M --transfers 16

      # 8) Generate masked public link
      - name: Generate and Mask Public Link
        id: generate_link
        if: ${{ steps.rclone_upload.outcome == 'success' && steps.rclone_upload.outputs.FINAL_DESTINATION != '' }}
        run: |
          set -euo pipefail
          PUBLIC_LINK="$(rclone link --onedrive-link-type view --onedrive-link-scope anonymous "${{ steps.rclone_upload.outputs.FINAL_DESTINATION }}")" || PUBLIC_LINK="Failed to create link."
          echo "::add-mask::${PUBLIC_LINK}"
          echo "PUBLIC_LINK=${PUBLIC_LINK}" >> "$GITHUB_OUTPUT"

      # 9) Telegram notify
      - name: Send Telegram Notification
        if: success()
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          message: |
            ✅ **Dump & Upload Hoàn Tất!**

            **File ROM:** `${{ steps.rclone_upload.outputs.ROM_FILENAME }}`
            **Thư mục:** `${{ steps.rclone_upload.outputs.FINAL_DESTINATION }}`
            **Link truy cập:** ${{ steps.generate_link.outputs.PUBLIC_LINK }}
          format: markdown

      # 10) Job summary
      - name: Job Summary
        if: always()
        run: |
          echo "## Dump Summary" >> "$GITHUB_STEP_SUMMARY"
          echo "- ROM: \`${{ github.event.inputs.ROM_URL }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- PARTITIONS: \`${{ github.event.inputs.PARTITIONS }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Uploaded to: \`${{ steps.rclone_upload.outputs.FINAL_DESTINATION }}\`" >> "$GITHUB_STEP_SUMMARY"
          echo "- Public link: \`${{ steps.generate_link.outputs.PUBLIC_LINK }}\`" >> "$GITHUB_STEP_SUMMARY"

